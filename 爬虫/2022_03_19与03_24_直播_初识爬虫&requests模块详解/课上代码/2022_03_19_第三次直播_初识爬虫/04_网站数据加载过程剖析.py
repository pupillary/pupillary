"""
1. 输入网址， 发送请求
2. 得到响应
3. 渲染页面

数据是在哪里变成'页面源代码'的？？？？？
A， 浏览器
B， 服务器(正确)

如果页面源代码里有数据, 服务器渲染数据成页面源代码的
resp.read()  => 页面源代码  => 提纯 => 保存

** 不是所有的网站都是把数据直接加载到页面源代码上的

第二种请求方式：
    输入网址后。 服务器返回一个页面源代码（可能会缺少一些数据）
    在一个特殊的情况下，触发一个新的请求。
    这个新的请求专门用来请求数据.
    服务器返回数据后。 浏览器执行一些脚本。 把数据`渲染`到浏览器上给用户使用

你是刘强东。你来设计京东的首页。 你会选哪种方式？
A，服务器渲染全部数据
B，服务器渲染部分数据  省钱, 用户体验好. 爬虫见的多

你要的数据. 不在页面源代码上, 你需要想办法看到其他的网络请求回来的东西, 分析数据在哪里

总结,
1.你要的东西在页面源代码. 直接拿`源代码`提取数据即可
2.你要的东西，不在页面源代码, 需要想办法找到真正的加载数据的那个请求. 然后提取数据 ？？？？

浏览器：
通过网络请求拿到一堆 页面源代码 -> 脚本， 浏览器的运行之后 =》 elements(当前的状态)
elements： 这里面的东西是经过 脚本，浏览器运行之后的 页面源代码
    页面源代码和elements不是一码事儿
        页面源代码 -> 面粉 -> 充气泵  没有的
        浏览器 -> 饼铛
        elements -> 大饼 -> 充气泵 有东西的

elements 和页面源代码是不一样的.
我们的程序拿到的是 “页面源代码”, 一定以`页面源代码`为基准

console： 控制台，用来调试js代码的
source： 页面所有的资源
network： 所有的网络请求数据包



"""

